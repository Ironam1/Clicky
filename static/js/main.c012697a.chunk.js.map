{"version":3,"sources":["components/board/character.js","components/board/characterBox.js","components/board/scoreDisplay.js","components/board/board.js","App.js","serviceWorker.js","index.js"],"names":["Character","handleClick","props","onCharacterClick","index","className","src","this","character","img","alt","onClick","Component","CharacterBox","characters","map","key","name","ScoreDisplay","score","shuffleArray","arr","a","Math","random","sort","b","initalChars","clicked","Board","state","setState","user","current","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c012697a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Character extends Component {\n  handleClick = () => {\n    this.props.onCharacterClick(this.props.index);\n  };\n\n  render() {\n    return (\n      <div className=\"character\">\n        <img\n          src={this.props.character.img}\n          alt=\"character\"\n          className=\"profile-pic\"\n          onClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Character from \"./character\";\n\nconst CharacterBox = props => {\n  return (\n    <div className=\"character-box\">\n      {props.characters.map((character, index) => \n        <Character\n          character={character}\n          index={index}\n          onCharacterClick={props.onCharacterClick}\n          key={character.name}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CharacterBox;","import React from \"react\";\n\nconst ScoreDisplay = props => (\n  <div className=\"score-keeper\">Score: {props.score}</div>\n);\n\nexport default ScoreDisplay;","import React, { Component } from \"react\";\n\nimport CharacterBox from \"./characterBox\";\nimport ScoreDisplay from \"./scoreDisplay\";\n\nconst shuffleArray = arr =>\n  arr\n    .map(a => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1]);\n\nconst initalChars = [\n  {\n    name: \"Bowser\",\n    img: \"img/200x200/Bowser.png\",\n    clicked: false\n  },\n  {\n    name: \"Dr. Mario\",\n    img: \"img/200x200/DrMario.png\",\n    clicked: false\n  },\n  {\n    name: \"Duck Hunt\",\n    img: \"img/200x200/DuckHunt.png\",\n    clicked: false\n  },\n  {\n    name: \"Incineroar\",\n    img: \"img/200x200/Incineroar.png\",\n    clicked: false\n  },\n  {\n    name: \"Inkling\",\n    img: \"img/200x200/Inkling.png\",\n    clicked: false\n  },\n  {\n    name: \"Jigglypuff\",\n    img: \"img/200x200/Jiggly.png\",\n    clicked: false\n  },\n  {\n    name: \"Joker\",\n    img: \"img/200x200/Joker.png\",\n    clicked: false\n  },\n  {\n    name: \"Mario\",\n    img: \"img/200x200/Mario.png\",\n    clicked: false\n  },\n  {\n    name: \"Mii Gunner\",\n    img: \"img/200x200/MiiGunner.png\",\n    clicked: false\n  },\n  {\n    name: \"Mr. Game & Watch\",\n    img: \"img/200x200/MrGame.png\",\n    clicked: false\n  },\n  {\n    name: \"Nes\",\n    img: \"img/200x200/Nes.png\",\n    clicked: false\n  },\n  {\n    name: \"Pikachu\",\n    img: \"img/200x200/Pikachu.png\",\n    clicked: false\n  },\n  {\n    name: \"Ridley\",\n    img: \"img/200x200/Ridley.png\",\n    clicked: false\n  },\n  {\n    name: \"Sonic\",\n    img: \"img/200x200/Sonic.png\",\n    clicked: false\n  },\n  {\n    name: \"Zero Suit Samus\",\n    img: \"img/200x200/ZeroSuit.png\",\n    clicked: false\n  }\n];\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        score: 0\n      },\n      characters: shuffleArray(initalChars)\n    };\n  }\n  onCharacterClick = index => {\n    if (!this.state.characters[index].clicked) {\n      this.setState({\n        characters: shuffleArray(\n          this.state.characters.map((character, current) => {\n            return current === index\n              ? { ...character, clicked: true }\n              : character;\n          })\n        ),\n        user: {\n          ...this.state.user,\n          score: this.state.user.score + 1\n        }\n      });\n    } else {\n      this.setState({\n        characters: shuffleArray(\n          this.state.characters.map(character => {\n            return { ...character, clicked: false };\n          })\n        ),\n        user: {\n            ...this.state.user,\n            score: 0\n        }\n      });\n    }\n  }\n\n  render(){\n      return (\n          <div className=\"Board\">\n            <h2>SUPER<br/>MEMORY<br />BROS.!</h2>\n              <h3>Try to click on each Smash Bros. Chatacter once. Each time you click, the board will shuffle!<br/>\n              Try to get the high score! Clicking on the same character will end the game!</h3>\n              <ScoreDisplay\n              score={this.state.user.score} />\n              <CharacterBox\n              characters={this.state.characters}\n              onCharacterClick={this.onCharacterClick} />\n          </div>\n      )\n  }\n}\n","import React, { Component } from 'react';\nimport Board from \"./components/board/board\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}